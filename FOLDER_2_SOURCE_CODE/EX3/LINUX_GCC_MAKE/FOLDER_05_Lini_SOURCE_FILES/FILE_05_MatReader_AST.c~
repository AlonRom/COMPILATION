/**************************************/
/* FILE NAME: FILE_05_MatReader_AST.c */
/**************************************/

/*************************/
/* GENERAL INCLUDE FILES */
/*************************/
#include <stdio.h>

/*************************/
/* PROJECT INCLUDE FILES */
/*************************/
#include "util.h"
#include "FILE_05_MatReader_AST.h"

/***************/
/* DEFINITIONS */
/***************/
#define MAX_NUM_ROWS 4
#define MAX_NUM_COLS 5

/****************/
/* STRUCT TYPES */
/****************/
struct AST_Number_
{
	int nominator;
	int denominator;
};

/****************/
/* STRUCT TYPES */
/****************/
struct AST_RowVec_
{
	AST_Number RowVec[MAX_NUM_COLS];
};

/****************/
/* STRUCT TYPES */
/****************/
struct AST_Mat_
{
	int numRows;
	int numCols;
	
	AST_Number Mat[MAX_NUM_ROW][MAX_NUM_COLS];
};

/*********/
/* CTORS */
/*********/
AST_RowVec AST_Alloc_RowVec2(AST_Number x,AST_Number y)
{
	/**************/
	/* ALLOCATION */
	/**************/
	AST_RowVec p = (AST_RowVec) checked_malloc(sizeof(*p));

	/****************/
	/* CLEAR MEMORY */
	/****************/
	memset(p->RowVec,0,sizeof(p->RowVec));
	
	/************/
	/* COPY ... */
	/************/
	p->RowVec[0]=x;
	p->RowVec[1]=y;
	
	/**********/
	/* RETURN */
	/**********/
	return p;
}
AST_RowVec AST_Alloc_RowVec3(AST_Number x,AST_Number y,AST_Number z)
{
	/**************/
	/* ALLOCATION */
	/**************/
	AST_RowVec p = (AST_RowVec) checked_malloc(sizeof(*p));

	/****************/
	/* CLEAR MEMORY */
	/****************/
	memset(p->RowVec,0,sizeof(p->RowVec));
	
	/************/
	/* COPY ... */
	/************/
	p->RowVec[0]=x;
	p->RowVec[1]=y;
	p->RowVec[2]=z;
	
	/**********/
	/* RETURN */
	/**********/
	return p;
}

AST_RowVec AST_Alloc_RowVec4(AST_Number x,AST_Number y,AST_Number z,AST_Number w)
{
	/**************/
	/* ALLOCATION */
	/**************/
	AST_RowVec p = (AST_RowVec) checked_malloc(sizeof(*p));

	/****************/
	/* CLEAR MEMORY */
	/****************/
	memset(p->RowVec,0,sizeof(p->RowVec));
	
	/************/
	/* COPY ... */
	/************/
	p->RowVec[0]=x;
	p->RowVec[1]=y;
	p->RowVec[2]=z;
	p->RowVec[3]=w;
	
	/**********/
	/* RETURN */
	/**********/
	return p;
}

AST_RowVec AST_Alloc_RowVec2(AST_Number x,AST_Number y)
{
	/**************/
	/* ALLOCATION */
	/**************/
	AST_RowVec p = (AST_RowVec) checked_malloc(sizeof(*p));

	/****************/
	/* CLEAR MEMORY */
	/****************/
	memset(p->RowVec,0,sizeof(p->RowVec));
	
	/************/
	/* COPY ... */
	/************/
	p->RowVec[0]=x;
	p->RowVec[1]=y;
	
	/**********/
	/* RETURN */
	/**********/
	return p;
}
/*********/
/* CTORS */
/*********/
AST_Mat AST_Alloc_Mat1x2(AST_RowVec2 R1)
{
	/**************/
	/* ALLOCATION */
	/**************/
	AST_Mat p = (AST_Mat) checked_malloc(sizeof(*p));

	/****************/
	/* CLEAR MEMORY */
	/****************/
	memset(p->Mat,0,sizeof(p->Mat));
	
	/**************/
	/* ROW & COLS */
	/**************/
	p->numRows = 1;
	p->numCols = 2;
	
	/************/
	/* COPY ... */
	/************/
	p->Mat[0][0]=R1[0];p->Mat[0][1]=R1[1];
	
	/**********/
	/* RETURN */
	/**********/
	return p;
}
AST_Mat AST_Alloc_Mat1x3(AST_RowVec3 R1)
{
	/**************/
	/* ALLOCATION */
	/**************/
	AST_Mat p = (AST_Mat) checked_malloc(sizeof(*p));

	/****************/
	/* CLEAR MEMORY */
	/****************/
	memset(p->Mat,0,sizeof(p->Mat));
	
	/**************/
	/* ROW & COLS */
	/**************/
	p->numRows = 1;
	p->numCols = 3;
	
	/************/
	/* COPY ... */
	/************/
	p->Mat[0][0]=R1[0];p->Mat[0][1]=R1[1];p->Mat[0][2]=R1[2];
	
	/**********/
	/* RETURN */
	/**********/
	return p;
}
AST_Mat AST_Alloc_Mat1x4(AST_RowVec4 R1)
{
	/**************/
	/* ALLOCATION */
	/**************/
	AST_Mat p = (AST_Mat) checked_malloc(sizeof(*p));

	/****************/
	/* CLEAR MEMORY */
	/****************/
	memset(p->Mat,0,sizeof(p->Mat));
	
	/**************/
	/* ROW & COLS */
	/**************/
	p->numRows = 1;
	p->numCols = 4;
	
	/************/
	/* COPY ... */
	/************/
	p->Mat[0][0]=R1[0];p->Mat[0][1]=R1[1];p->Mat[0][2]=R1[2];p->Mat[0][3]=R1[3];
	
	/**********/
	/* RETURN */
	/**********/
	return p;
}

/*********/
/* CTORS */
/*********/
AST_Mat AST_Alloc_Mat2x2(AST_RowVec2 R1,AST_RowVec2 R2)
{
	/**************/
	/* ALLOCATION */
	/**************/
	AST_Mat p = (AST_Mat) checked_malloc(sizeof(*p));

	/****************/
	/* CLEAR MEMORY */
	/****************/
	memset(p->Mat,0,sizeof(p->Mat));
	
	/**************/
	/* ROW & COLS */
	/**************/
	p->numRows = 2;
	p->numCols = 2;
	
	/************/
	/* COPY ... */
	/************/
	p->Mat[0][0]=R1[0];p->Mat[0][1]=R1[1];
	p->Mat[1][0]=R2[0];p->Mat[1][1]=R2[1];
	
	/**********/
	/* RETURN */
	/**********/
	return p;
}
AST_Mat AST_Alloc_Mat2x3(AST_RowVec3 R1,AST_RowVec3 R2)
{
	/**************/
	/* ALLOCATION */
	/**************/
	AST_Mat p = (AST_Mat) checked_malloc(sizeof(*p));

	/****************/
	/* CLEAR MEMORY */
	/****************/
	memset(p->Mat,0,sizeof(p->Mat));
	
	/**************/
	/* ROW & COLS */
	/**************/
	p->numRows = 2;
	p->numCols = 3;
	
	/************/
	/* COPY ... */
	/************/
	p->Mat[0][0]=R1[0];p->Mat[0][1]=R1[1];p->Mat[0][2]=R1[2];
	p->Mat[1][0]=R2[0];p->Mat[1][1]=R2[1];p->Mat[1][2]=R2[2];
	
	/**********/
	/* RETURN */
	/**********/
	return p;
}
AST_Mat AST_Alloc_Mat2x4(AST_RowVec4 RowVec4,AST_RowVec4 RowVec4)
{
	/**************/
	/* ALLOCATION */
	/**************/
	AST_Mat p = (AST_Mat) checked_malloc(sizeof(*p));

	/****************/
	/* CLEAR MEMORY */
	/****************/
	memset(p->Mat,0,sizeof(p->Mat));
	
	/**************/
	/* ROW & COLS */
	/**************/
	p->numRows = 2;
	p->numCols = 4;
	
	/************/
	/* COPY ... */
	/************/
	p->Mat[0][0]=R1[0];p->Mat[0][1]=R1[1];p->Mat[0][2]=R1[2];p->Mat[0][3]=R1[3];
	p->Mat[1][0]=R2[0];p->Mat[1][1]=R2[1];p->Mat[1][2]=R2[2];p->Mat[1][3]=R2[3];
	
	/**********/
	/* RETURN */
	/**********/
	return p;
}

/*********/
/* CTORS */
/*********/
AST_Mat AST_Alloc_Mat3x2(AST_RowVec2 R1,AST_RowVec2 R2,AST_RowVec2 R3)
{
	/**************/
	/* ALLOCATION */
	/**************/
	AST_Mat p = (AST_Mat) checked_malloc(sizeof(*p));

	/****************/
	/* CLEAR MEMORY */
	/****************/
	memset(p->Mat,0,sizeof(p->Mat));
	
	/**************/
	/* ROW & COLS */
	/**************/
	p->numRows = 3;
	p->numCols = 2;
	
	/************/
	/* COPY ... */
	/************/
	p->Mat[0][0]=R1[0];p->Mat[0][1]=R1[1];
	p->Mat[1][0]=R2[0];p->Mat[1][1]=R2[1];
	p->Mat[2][0]=R3[0];p->Mat[2][1]=R3[1];
	
	/**********/
	/* RETURN */
	/**********/
	return p;
}
AST_Mat AST_Alloc_Mat3x3(AST_RowVec3 R1,AST_RowVec3 R2,AST_RowVec3 R3)
{
	/**************/
	/* ALLOCATION */
	/**************/
	AST_Mat p = (AST_Mat) checked_malloc(sizeof(*p));

	/****************/
	/* CLEAR MEMORY */
	/****************/
	memset(p->Mat,0,sizeof(p->Mat));
	
	/**************/
	/* ROW & COLS */
	/**************/
	p->numRows = 3;
	p->numCols = 3;
	
	/************/
	/* COPY ... */
	/************/
	p->Mat[0][0]=R1[0];p->Mat[0][1]=R1[1];p->Mat[0][2]=R1[2];
	p->Mat[1][0]=R2[0];p->Mat[1][1]=R2[1];p->Mat[1][2]=R2[2];
	p->Mat[2][0]=R3[0];p->Mat[2][1]=R3[1];p->Mat[2][2]=R3[2];
	
	/**********/
	/* RETURN */
	/**********/
	return p;
}
AST_Mat AST_Alloc_Mat3x4(AST_RowVec4 R1,AST_RowVec4 R2,AST_RowVec4 R3)
{
	/**************/
	/* ALLOCATION */
	/**************/
	AST_Mat p = (AST_Mat) checked_malloc(sizeof(*p));

	/****************/
	/* CLEAR MEMORY */
	/****************/
	memset(p->Mat,0,sizeof(p->Mat));
	
	/**************/
	/* ROW & COLS */
	/**************/
	p->numRows = 3;
	p->numCols = 3;
	
	/************/
	/* COPY ... */
	/************/
	p->Mat[0][0]=R1[0];p->Mat[0][1]=R1[1];p->Mat[0][2]=R1[2];p->Mat[0][3]=R1[3];
	p->Mat[1][0]=R2[0];p->Mat[1][1]=R2[1];p->Mat[1][2]=R2[2];p->Mat[1][3]=R2[3];
	p->Mat[2][0]=R3[0];p->Mat[2][1]=R3[1];p->Mat[2][2]=R3[2];p->Mat[2][3]=R3[3];
	
	/**********/
	/* RETURN */
	/**********/
	return p;
}

/*********/
/* CTORS */
/*********/
AST_Number AST_Alloc_Number(int nominator,int denominator)
{
	AST_Number p = (AST_Number) checked_malloc(sizeof(*p));
	
	p->nominator = nominator;
	p->denominator = denominator;
	
	return p;
}

